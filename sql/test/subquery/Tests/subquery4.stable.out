stdout of test 'subquery4` in directory 'sql/test/subquery` itself:


# 15:41:18 >  
# 15:41:18 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34582" "--set" "mapi_usock=/var/tmp/mtest-262250/.s.monetdb.34582" "--forcemito" "--dbpath=/home/ferreira/repositories/MonetDB-default/BUILD/var/MonetDB/mTests_sql_test_subquery" "--set" "embedded_c=true"
# 15:41:18 >  

# MonetDB 5 server v11.36.0 (hg id: 96d3e2d22c7d)
# This is an unreleased version
# Serving database 'mTests_sql_test_subquery', using 8 threads
# Compiled for x86_64-pc-linux-gnu/64bit with 128bit integers
# Found 15.498 GiB available main-memory of which we use 12.631 GiB
# Copyright (c) 1993 - July 2008 CWI.
# Copyright (c) August 2008 - 2020 MonetDB B.V., all rights reserved
# Visit https://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://localhost.localdomain:34582/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-262250/.s.monetdb.34582
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded

# 15:41:18 >  
# 15:41:18 >  "mclient" "-lsql" "-ftest" "-tnone" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-262250" "--port=34582"
# 15:41:18 >  

#CREATE TABLE tbl_ProductSales (ColID int, Product_Category  varchar(64), Product_Name  varchar(64), TotalSales int); 
#INSERT INTO tbl_ProductSales VALUES (1,'Game','Mobo Game',200),(2,'Game','PKO Game',400),(3,'Fashion','Shirt',500),(4,'Fashion','Shorts',100);
[ 4	]
#CREATE TABLE another_T (col1 INT, col2 INT, col3 INT, col4 INT, col5 INT, col6 INT, col7 INT, col8 INT);
#INSERT INTO another_T VALUES (1,2,3,4,5,6,7,8), (11,22,33,44,55,66,77,88), (111,222,333,444,555,666,777,888), (1111,2222,3333,4444,5555,6666,7777,8888);
[ 4	]
#CREATE TABLE integers(i INTEGER);
#INSERT INTO integers VALUES (1), (2), (3), (NULL);
[ 4	]
#CREATE FUNCTION evilfunction(input INT) RETURNS TABLE (outt INT) BEGIN RETURN TABLE(SELECT input); END;
#CREATE FUNCTION evilfunction(input1 INT, input2 INT) RETURNS TABLE (outt INT) BEGIN RETURN TABLE(SELECT input1 + input2); END;
#PREPARE SELECT
#	(SELECT 1 FROM evilfunction((SELECT ?))) 
#FROM another_T;
#PREPARE SELECT
#	(SELECT 1 FROM evilfunction((SELECT ?))) 
#FROM another_T;
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	str,	str,	str # type
% 7,	2,	1,	0,	2,	2 # length
[ "tinyint",	8,	0,	"",	"%4",	"%4"	]
[ "int",	32,	0,	NULL,	NULL,	NULL	]
#PREPARE SELECT
#	(SELECT 1 FROM evilfunction((SELECT ?, ?))) 
#FROM another_T;
#PREPARE SELECT
#	(SELECT 1 FROM evilfunction((SELECT ?, ?))) 
#FROM another_T;
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	str,	str,	str # type
% 7,	2,	1,	0,	2,	2 # length
[ "tinyint",	8,	0,	"",	"%5",	"%5"	]
[ "int",	32,	0,	NULL,	NULL,	NULL	]
[ "int",	32,	0,	NULL,	NULL,	NULL	]
#SELECT
#	(SELECT i2.i FROM evilfunction(MIN(i1.i)) as i2(i))
#FROM integers i1;
% .%4 # table_name
% %4 # name
% int # type
% 1 # length
[ 1	]
#SELECT
#	(SELECT i2.i FROM evilfunction((SELECT MIN(1))) as i2(i))
#FROM integers i1;
% .%4 # table_name
% %4 # name
% int # type
% 1 # length
[ 1	]
[ 1	]
[ 1	]
[ 1	]
#SELECT
#	(SELECT i2.i FROM evilfunction((SELECT MIN(i1.i + i3.i) FROM integers i3)) as i2(i))
#FROM integers i1;
% .%4 # table_name
% %4 # name
% int # type
% 1 # length
[ 2	]
[ 3	]
[ 4	]
[ NULL	]
#SELECT 1 FROM evilfunction((SELECT MAX(1) OVER ()));
% . # table_name
% single_value # name
% tinyint # type
% 1 # length
[ 1	]
#SELECT 1 FROM evilfunction((SELECT MAX(1) OVER () UNION ALL SELECT 1));
% . # table_name
% single_value # name
% tinyint # type
% 1 # length
[ 1	]
[ 1	]
#SELECT i2.i FROM evilfunction((SELECT MAX(1) OVER ())) as i2(i);
% .i2 # table_name
% i # name
% int # type
% 1 # length
[ 1	]
#SELECT
#	(SELECT i2.i FROM evilfunction((SELECT MAX(i1.i) OVER ())) as i2(i))
#FROM integers i1;
% .%12 # table_name
% %12 # name
% int # type
% 1 # length
[ 1	]
[ 2	]
[ 3	]
[ NULL	]
#SELECT i FROM integers WHERE (SELECT COUNT(1) OVER ()) = 1;
% sys.integers # table_name
% i # name
% int # type
% 1 # length
[ 1	]
[ 2	]
[ 3	]
[ NULL	]
#SELECT i FROM integers WHERE (SELECT COUNT(i) OVER ()) = 1;
% sys.integers # table_name
% i # name
% int # type
% 1 # length
[ 1	]
[ 2	]
[ 3	]
#UPDATE another_T SET col4 = (SELECT SUM(col4 + ColID) FROM tbl_ProductSales);
[ 4	]
#UPDATE another_T SET col6 = 1 WHERE col6 = (SELECT COUNT(col3 + ColID) FROM tbl_ProductSales);
[ 0	]
#DELETE FROM another_T WHERE col8 = (SELECT AVG(col6 + ColID) FROM tbl_ProductSales);
[ 0	]
#UPDATE another_T SET col3 = (SELECT SUM(col5) OVER ());
[ 4	]
#UPDATE another_T SET col5 = 1 WHERE col5 = (SELECT MAX(col2) OVER ());
[ 0	]
#DELETE FROM another_T WHERE col7 = (SELECT SUM(col3) OVER ());
[ 0	]
#DECLARE x int;
#DECLARE y int;
#CREATE PROCEDURE crashme(a int) BEGIN DECLARE x INT; SET x = a; END;
#create sequence "debugme" as integer start with 1;
#alter sequence "debugme" restart with (select MAX(1));
#alter sequence "debugme" restart with (select MIN(1) OVER ());
#drop sequence "debugme";
#CREATE FUNCTION upsme(input INT) RETURNS INT BEGIN RETURN SELECT MIN(input) OVER (); END;
#SELECT upsme(1);
% . # table_name
% %1 # name
% int # type
% 1 # length
[ 1	]
#SELECT upsme(1);
% . # table_name
% %1 # name
% int # type
% 1 # length
[ 1	]
#DROP FUNCTION upsme(INT);
#DROP FUNCTION evilfunction(INT);
#DROP FUNCTION evilfunction(INT, INT);
#DROP TABLE tbl_ProductSales;
#DROP TABLE another_T;
#DROP TABLE integers;

# 15:41:18 >  
# 15:41:18 >  "Done."
# 15:41:18 >  

