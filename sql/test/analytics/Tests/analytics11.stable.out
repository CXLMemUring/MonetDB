stdout of test 'analytics11` in directory 'sql/test/analytics` itself:


# 14:50:26 >  
# 14:50:26 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=33540" "--set" "mapi_usock=/var/tmp/mtest-19672/.s.monetdb.33540" "--forcemito" "--dbpath=/home/ferreira/repositories/MonetDB-grouping-analytics/BUILD/var/MonetDB/mTests_sql_test_analytics" "--set" "embedded_c=true"
# 14:50:26 >  

# MonetDB 5 server v11.34.0 (hg id: 926989675ef4+)
# This is an unreleased version
# Serving database 'mTests_sql_test_analytics', using 8 threads
# Compiled for x86_64-pc-linux-gnu/64bit with 128bit integers
# Found 15.527 GiB available main-memory.
# Copyright (c) 1993 - July 2008 CWI.
# Copyright (c) August 2008 - 2019 MonetDB B.V., all rights reserved
# Visit https://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://localhost.localdomain:33540/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-19672/.s.monetdb.33540
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded

# 14:50:27 >  
# 14:50:27 >  "mclient" "-lsql" "-ftest" "-tnone" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-19672" "--port=33540"
# 14:50:27 >  

#CREATE TABLE tbl_ProductSales (ColID int, Product_Category  varchar(64), Product_Name  varchar(64), TotalSales int); 
#INSERT INTO tbl_ProductSales VALUES (1,'Game','Mobo Game',200),(2,'Game','PKO Game',400),(3,'Fashion','Shirt',500),(4,'Fashion','Shorts',100);
[ 4	]
#SELECT 1
#FROM tbl_ProductSales
#GROUP BY Product_Category;
% .L1 # table_name
% L1 # name
% tinyint # type
% 1 # length
[ 1	]
[ 1	]
#SELECT 1
#FROM tbl_ProductSales
#GROUP BY ();
% .L1 # table_name
% L1 # name
% tinyint # type
% 1 # length
[ 1	]
#SELECT
#    GROUPING(Product_Category) AS myalias
#FROM tbl_ProductSales
#GROUP BY ROLLUP(Product_Category);
% .L2 # table_name
% myalias # name
% tinyint # type
% 1 # length
[ 0	]
[ 0	]
[ 1	]
#SELECT
#    GROUPING(Product_Category) AS myalias
#FROM tbl_ProductSales
#GROUP BY Product_Category, ROLLUP(Product_Category);
% .L2 # table_name
% myalias # name
% tinyint # type
% 1 # length
[ 0	]
[ 0	]
[ 0	]
[ 0	]
#SELECT
#    GROUPING(Product_Category, Product_Name, ColID)
#FROM tbl_ProductSales
#GROUP BY ROLLUP(Product_Category, Product_Name, ColID);
% .L1 # table_name
% L1 # name
% tinyint # type
% 1 # length
[ 0	]
[ 0	]
[ 0	]
[ 0	]
[ 1	]
[ 1	]
[ 1	]
[ 1	]
[ 3	]
[ 3	]
[ 7	]
#SELECT
#    GROUPING(Product_Category, Product_Name, ColID)
#FROM tbl_ProductSales
#GROUP BY ROLLUP((Product_Category, Product_Name, ColID));
% .L1 # table_name
% L1 # name
% tinyint # type
% 1 # length
[ 0	]
[ 0	]
[ 0	]
[ 0	]
[ 7	]
#SELECT
#    GROUPING(Product_Category, ColID)
#FROM tbl_ProductSales
#GROUP BY ROLLUP((Product_Category, Product_Name, ColID));
% .L1 # table_name
% L1 # name
% tinyint # type
% 1 # length
[ 0	]
[ 0	]
[ 0	]
[ 0	]
[ 3	]
#SELECT
#    GROUPING(Product_Category, ColID)
#FROM tbl_ProductSales
#GROUP BY CUBE((Product_Category, Product_Name, ColID));
% .L1 # table_name
% L1 # name
% tinyint # type
% 1 # length
[ 3	]
[ 0	]
[ 0	]
[ 0	]
[ 0	]
#SELECT
#    GROUPING(Product_Category)
#FROM tbl_ProductSales
#GROUP BY GROUPING SETS((Product_Category), (Product_Name), (Product_Category, Product_Name), ())
#ORDER BY GROUPING(Product_Category);
% .L1 # table_name
% L1 # name
% tinyint # type
% 1 # length
[ 0	]
[ 0	]
[ 0	]
[ 0	]
[ 0	]
[ 0	]
[ 1	]
[ 1	]
[ 1	]
[ 1	]
[ 1	]
#SELECT
#    GROUPING(Product_Category)
#FROM tbl_ProductSales
#GROUP BY GROUPING SETS((Product_Category), (Product_Name), (Product_Category, Product_Name), ())
#HAVING GROUPING(Product_Category) = 0;
% .L1 # table_name
% L1 # name
% tinyint # type
% 1 # length
[ 0	]
[ 0	]
[ 0	]
[ 0	]
[ 0	]
[ 0	]
#SELECT
#    GROUPING(Product_Category, Product_Name, ColID), GROUPING(Product_Name, ColID)
#FROM tbl_ProductSales
#GROUP BY CUBE((Product_Category, Product_Name, ColID))
#ORDER BY GROUPING(Product_Category, ColID);
% .L1,	.L2 # table_name
% L1,	L2 # name
% tinyint,	tinyint # type
% 1,	1 # length
[ 0,	0	]
[ 0,	0	]
[ 0,	0	]
[ 0,	0	]
[ 7,	3	]
#SELECT
#    GROUPING(Product_Category, Product_Name, ColID) + 1
#FROM tbl_ProductSales
#GROUP BY ROLLUP(Product_Category, Product_Name, ColID)
#HAVING GROUPING(Product_Category, Product_Name, ColID) <> 3
#ORDER BY GROUPING(Product_Category, Product_Name, ColID) DESC;
% .L2 # table_name
% L2 # name
% smallint # type
% 1 # length
[ 8	]
[ 2	]
[ 2	]
[ 2	]
[ 2	]
[ 1	]
[ 1	]
[ 1	]
[ 1	]
#SELECT GROUPING(Product_Category), AVG(SUM(TotalSales)) OVER (ROWS UNBOUNDED PRECEDING) FROM tbl_ProductSales GROUP BY GROUPING SETS((Product_Category), (Product_Name), (Product_Category, Product_Name), ());
% .L1,	.L3 # table_name
% L1,	L3 # name
% tinyint,	double # type
% 1,	24 # length
[ 0,	600	]
[ 0,	600	]
[ 1,	466.6666667	]
[ 1,	450	]
[ 1,	460	]
[ 1,	400	]
[ 0,	371.4285714	]
[ 0,	375	]
[ 0,	388.8888889	]
[ 0,	360	]
[ 1,	436.3636364	]
#SELECT
#    GROUPING(Product_Category), RANK() OVER (PARTITION BY SUM(TotalSales))
#FROM tbl_ProductSales
#GROUP BY GROUPING SETS((Product_Category), (Product_Name), (Product_Category, Product_Name), ());
% .L1,	.L4 # table_name
% L1,	L4 # name
% tinyint,	int # type
% 1,	1 # length
[ 1,	1	]
[ 0,	1	]
[ 1,	1	]
[ 0,	1	]
[ 1,	1	]
[ 0,	1	]
[ 1,	1	]
[ 0,	1	]
[ 0,	1	]
[ 0,	1	]
[ 1,	1	]
#SELECT
#    CASE WHEN GROUPING(Product_Category, Product_Name, ColID) * 10 = 30 THEN 2 ELSE NULL END
#FROM tbl_ProductSales
#GROUP BY ROLLUP(Product_Category, Product_Name, ColID);
% .L2 # table_name
% L2 # name
% tinyint # type
% 1 # length
[ NULL	]
[ NULL	]
[ NULL	]
[ NULL	]
[ NULL	]
[ NULL	]
[ NULL	]
[ NULL	]
[ 2	]
[ 2	]
[ NULL	]
#SELECT
#    GROUPING(Product_Category), AVG(SUM(TotalSales)) OVER (ROWS UNBOUNDED PRECEDING), RANK() OVER (PARTITION BY SUM(TotalSales))
#FROM tbl_ProductSales
#GROUP BY GROUPING SETS((Product_Category), (Product_Name), (Product_Category, Product_Name), ());
% .L1,	.L3,	.L7 # table_name
% L1,	L3,	L7 # name
% tinyint,	double,	int # type
% 1,	24,	1 # length
[ 1,	400,	1	]
[ 0,	360,	1	]
[ 1,	466.6666667,	1	]
[ 0,	371.4285714,	1	]
[ 1,	450,	1	]
[ 0,	375,	1	]
[ 1,	460,	1	]
[ 0,	388.8888889,	1	]
[ 0,	600,	1	]
[ 0,	600,	1	]
[ 1,	436.3636364,	1	]
#SELECT
#    GROUPING(Product_Category), 
#    SUM(SUM(TotalSales)) OVER (RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), 
#    RANK() OVER (PARTITION BY SUM(ColID))
#FROM tbl_ProductSales
#GROUP BY GROUPING SETS((Product_Category), (Product_Name), (Product_Category, Product_Name), ());
% .L1,	.L3,	.L7 # table_name
% L1,	L3,	L7 # name
% tinyint,	hugeint,	int # type
% 1,	4,	1 # length
[ 1,	4800,	1	]
[ 0,	4800,	1	]
[ 1,	4800,	1	]
[ 0,	4800,	1	]
[ 0,	4800,	1	]
[ 1,	4800,	1	]
[ 0,	4800,	1	]
[ 1,	4800,	1	]
[ 0,	4800,	1	]
[ 0,	4800,	1	]
[ 1,	4800,	1	]
#CREATE TABLE tbl_X (ColID int, NItems int); 
#INSERT INTO tbl_X VALUES (1,1000),(2,500),(3,323),(4,0);
[ 4	]
#SELECT myalias, COUNT(*) FROM
#(
#    SELECT
#        GROUPING(tbl_ProductSales.ColID, tbl_X.ColID) AS myalias
#    FROM tbl_ProductSales
#    INNER JOIN tbl_X
#    ON tbl_ProductSales.ColID = tbl_X.ColID
#    WHERE tbl_X.NItems < 1000
#    GROUP BY CUBE(tbl_ProductSales.Product_Category, tbl_ProductSales.Product_Name, tbl_ProductSales.ColID), ROLLUP(tbl_X.ColID, tbl_X.NItems)
#) AS SubTables GROUP BY myalias ORDER BY myalias;
% .subtables,	.L5 # table_name
% myalias,	L5 # name
% tinyint,	bigint # type
% 1,	2 # length
[ 0,	24	]
[ 1,	12	]
[ 2,	24	]
[ 3,	9	]
#SELECT
#    GROUPING(tbl_ProductSales.ColID, tbl_X.ColID) AS myalias
#FROM tbl_ProductSales
#INNER JOIN tbl_X
#ON tbl_ProductSales.ColID = tbl_X.ColID
#WHERE tbl_X.NItems < 1000
#GROUP BY CUBE(Product_Category, Product_Name, tbl_ProductSales.ColID), ROLLUP(tbl_X.ColID, tbl_X.NItems)
#ORDER BY SUM(TotalSales) DESC
#LIMIT 1;
% .L4 # table_name
% myalias # name
% tinyint # type
% 1 # length
[ 3	]
#CREATE TABLE another_T (col1 INT, col2 INT, col3 INT, col4 INT, col5 INT, col6 INT, col7 INT, col8 INT);
#INSERT INTO another_T VALUES (1,2,3,4,5,6,7,8), (11,22,33,44,55,66,77,88), (111,222,333,444,555,666,777,888), (1111,2222,3333,4444,5555,6666,7777,8888);
[ 4	]
#SELECT
#    GROUPING(col1, col2, col3, col4, col5, col6, col7, col8)
#FROM another_T
#GROUP BY ROLLUP(col1);
% .L10 # table_name
% L10 # name
% boolean # type
% 5 # length
[ true	]
[ false	]
[ false	]
[ false	]
[ NULL	]
#SELECT
#    GROUPING(col1, col2, col3, col4, col5, col6, col7, col8), AVG(col1), CAST(SUM(col2) * 3 AS BIGINT), col3 + col4,
#    CAST(MAX(col5) * MIN(col6) AS BIGINT), col7, col1 IN (SELECT ColID FROM tbl_ProductSales), col2 IN (SELECT ColID + col3 FROM tbl_ProductSales)
#FROM another_T
#GROUP BY ROLLUP(col1, col2, col3, col4, col5, col6, col7, col8) --with 8 columns, a smallint is necessary for grouping's output
#ORDER BY GROUPING(col1, col2, col3, col4, col5, col6, col7, col8);
% .L1,	.L2,	.L4,	.L5,	.L10,	.another_t # table_name
% L1,	L2,	L4,	L5,	L10,	col7 # name
% smallint,	double,	bigint,	bigint,	bigint,	int # type
% 3,	24,	4,	4,	8,	4 # length
[ 0,	1,	6,	7,	30,	7	]
[ 0,	11,	66,	77,	3630,	77	]
[ 0,	111,	666,	777,	369630,	777	]
[ 0,	1111,	6666,	7777,	37029630,	7777	]
[ 1,	1,	6,	7,	30,	7	]
[ 1,	11,	66,	77,	3630,	77	]
[ 1,	111,	666,	777,	369630,	777	]
[ 1,	1111,	6666,	7777,	37029630,	7777	]
[ 3,	1,	6,	7,	30,	NULL	]
[ 3,	11,	66,	77,	3630,	NULL	]
[ 3,	111,	666,	777,	369630,	NULL	]
[ 3,	1111,	6666,	7777,	37029630,	NULL	]
[ 7,	1,	6,	7,	30,	NULL	]
[ 7,	11,	66,	77,	3630,	NULL	]
[ 7,	111,	666,	777,	369630,	NULL	]
[ 7,	1111,	6666,	7777,	37029630,	NULL	]
[ 15,	1,	6,	7,	30,	NULL	]
[ 15,	11,	66,	77,	3630,	NULL	]
[ 15,	111,	666,	777,	369630,	NULL	]
[ 15,	1111,	6666,	7777,	37029630,	NULL	]
[ 31,	1,	6,	NULL,	30,	NULL	]
[ 31,	11,	66,	NULL,	3630,	NULL	]
[ 31,	111,	666,	NULL,	369630,	NULL	]
[ 31,	1111,	6666,	NULL,	37029630,	NULL	]
[ 63,	1,	6,	NULL,	30,	NULL	]
[ 63,	11,	66,	NULL,	3630,	NULL	]
[ 63,	111,	666,	NULL,	369630,	NULL	]
[ 63,	1111,	6666,	NULL,	37029630,	NULL	]
[ 127,	1,	6,	NULL,	30,	NULL	]
[ 127,	11,	66,	NULL,	3630,	NULL	]
[ 127,	111,	666,	NULL,	369630,	NULL	]
[ 127,	1111,	6666,	NULL,	37029630,	NULL	]
[ 255,	308.5,	7404,	NULL,	33330,	NULL	]
#DROP TABLE tbl_ProductSales;

# 14:50:27 >  
# 14:50:27 >  "Done."
# 14:50:27 >  

