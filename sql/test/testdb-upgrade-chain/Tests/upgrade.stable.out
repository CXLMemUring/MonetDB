stdout of test 'upgrade` in directory 'sql/test/testdb-upgrade-chain` itself:


# 15:17:06 >  
# 15:17:06 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "gdk_dbfarm=/ufs/sjoerd/Monet-stable/var/MonetDB" "--set" "mapi_open=true" "--set" "mapi_port=36250" "--set" "monet_prompt=" "--trace" "--forcemito" "--set" "mal_listing=2" "--dbname=mTests_test_testdb-upgrade-chain" "--set" "mal_listing=0"
# 15:17:06 >  

# MonetDB 5 server v11.11.8 (hg id: 34fcf4e7226d+)
# This is an unreleased version
# Serving database 'mTests_test_testdb-upgrade-chain', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.629 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://madrid.ins.cwi.nl:36250/
# MonetDB/GIS module loaded
Running database upgrade commands:
set schema "sys";
create procedure suspend_log_flushing()
 external name sql.suspend_log_flushing;
create procedure resume_log_flushing()
 external name sql.resume_log_flushing;
create procedure hot_snapshot(tarfile string)
 external name sql.hot_snapshot;
update sys.functions set system = true where schema_id = (select id from sys.schemas where name = 'sys') and name in ('suspend_log_flushing', 'resume_log_flushing', 'hot_snapshot') and type = 2;
drop view sys.tracelog;
drop function sys.tracelog();
create function sys.tracelog()
	returns table (
		ticks bigint, -- time in microseconds
		stmt string  -- actual statement executed
	)
	external name sql.dump_trace;
create view sys.tracelog as select * from sys.tracelog();
update sys.functions set system = true where schema_id = (select id from sys.schemas where name = 'sys') and name = 'tracelog' and type = 5;
update sys._tables set system = true where schema_id = (select id from sys.schemas where name = 'sys') and name = 'tracelog';
drop view sys.sessions;
drop function sys.sessions;
create function sys.sessions()
returns table(
"sessionid" int,
"user" string,
"login" timestamp,
"idle" timestamp,
"optimizer" string,
"sessiontimeout" int,
"querytimeout" int,
"workerlimit" int,
"memorylimit" int)
 external name sql.sessions;
create view sys.sessions as select * from sys.sessions();
create procedure sys.setoptimizer("optimizer" string)
 external name clients.setoptimizer;
create procedure sys.setquerytimeout("query" int)
 external name clients.setquerytimeout;
create procedure sys.setsessiontimeout("timeout" int)
 external name clients.setsessiontimeout;
create procedure sys.setworkerlimit("limit" int)
 external name clients.setworkerlimit;
create procedure sys.setmemorylimit("limit" int)
 external name clients.setmemorylimit;
create procedure sys.setoptimizer("sessionid" int, "optimizer" string)
 external name clients.setoptimizer;
create procedure sys.setquerytimeout("sessionid" int, "query" int)
 external name clients.setquerytimeout;
create procedure sys.setsessiontimeout("sessionid" int, "query" int)
 external name clients.setsessiontimeout;
create procedure sys.setworkerlimit("sessionid" int, "limit" int)
 external name clients.setworkerlimit;
create procedure sys.setmemorylimit("sessionid" int, "limit" int)
 external name clients.setmemorylimit;
create procedure sys.stopsession("sessionid" int)
 external name clients.stopsession;
create function sys.prepared_statements()
returns table(
"sessionid" int,
"user" string,
"statementid" int,
"statement" string,
"created" timestamp)
 external name sql.prepared_statements;
create view sys.prepared_statements as select * from sys.prepared_statements();
create function sys.prepared_statements_args()
returns table(
"statementid" int,
"parameter" boolean,
"type" string,
"digits" int,
"scale" int,
"schema" string,
"table" string,
"column" string)
 external name sql.prepared_statements_args;
create view sys.prepared_statements_args as select * from sys.prepared_statements_args();
update sys.functions set system = true where schema_id = (select id from sys.schemas where name = 'sys') and name in ('sessions', 'prepared_statements', 'prepared_statements_args') and type = 5;
update sys._tables set system = true where schema_id = (select id from sys.schemas where name = 'sys') and name in ('sessions', 'prepared_statements', 'prepared_statements_args');
update sys.functions set system = true where schema_id = (select id from sys.schemas where name = 'sys') and name in ('setoptimizer', 'setquerytimeout', 'setsessiontimeout', 'setworkerlimit', 'setmemorylimit', 'setoptimizer', 'stopsession') and type = 2;
create function sys.debug(flag string) returns integer
 external name mdb."setDebug";
create function sys.debugflags()
 returns table(flag string, val bool)
 external name mdb."getDebugFlags";
update sys.functions set system = true where schema_id = (select id from sys.schemas where name = 'sys') and name in ('debug', 'debugflags');
drop view sys.queue;
drop function sys.queue;
create function sys.queue()
returns table(
 tag bigint,
 sessionid int,
	"user" string,
 started timestamp,
 status string,
 query string,
 progress int,
 workers int,
 memory int
)
external name sql.sysmon_queue;
grant execute on function sys.queue to public;
create view sys.queue as select * from sys.queue();
grant select on sys.queue to public;
create procedure sys.pause(tag tinyint)
external name sql.sysmon_pause;
create procedure sys.resume(tag tinyint)
external name sql.sysmon_resume;
create procedure sys.stop(tag tinyint)
external name sql.sysmon_stop;
create procedure sys.pause(tag smallint)
external name sql.sysmon_pause;
create procedure sys.resume(tag smallint)
external name sql.sysmon_resume;
create procedure sys.stop(tag smallint)
external name sql.sysmon_stop;
update sys.functions set system = true where schema_id = (select id from sys.schemas where name = 'sys') and name = 'queue' and type = 5;
update sys.functions set system = true where schema_id = (select id from sys.schemas where name = 'sys') and name in ('pause', 'resume', 'stop') and type = 2;
update sys._tables set system = true where schema_id = (select id from sys.schemas where name = 'sys') and name = 'queue';
ALTER TABLE sys.keywords SET READ WRITE;
DELETE FROM sys.keywords where "keyword" IN ('NOCYCLE','NOMAXVALUE','NOMINVALUE');
insert into sys.keywords values ('ANALYZE'),('AT'),('AUTHORIZATION'),('CACHE'),('CENTURY'),('COLUMN'),('CLIENT'),('CUBE'),('CYCLE'),('DATA'),('DATE'),('DEBUG'),('DECADE'),('DEALLOCATE'),('DIAGNOSTICS'),('DISTINCT'),('DOW'),('DOY'),('EXEC'),('EXECUTE'),('EXPLAIN'),('FIRST'),('FWF'),('GROUPING'),('GROUPS'),('INCREMENT'),('INTERVAL'),('KEY'),('LANGUAGE'),('LARGE'),('LAST'),('LATERAL'),('LEVEL'),('LOADER'),('MATCH'),('MATCHED'),('MAXVALUE'),('MINVALUE'),('NAME'),('NO'),('NULLS'),('OBJECT'),('OPTIONS'),('PASSWORD'),('PLAN'),('PRECISION'),('PREP'),('PREPARE'),('QUARTER'),('RELEASE'),('REPLACE'),('ROLLUP'),('SCHEMA'),('SEED'),('SERVER'),('SESSION'),('SETS'),('SIZE'),('STATEMENT'),('TABLE'),('TEMP'),('TEMPORARY'),('TEXT'),('TIME'),('TIMESTAMP'),('TRACE'),('TYPE'),('UNIONJOIN'),('WEEK'),('YEAR'),('ZONE');
commit;
set schema "sys";

Running database upgrade commands:
set schema "sys";
ALTER TABLE sys.keywords SET READ ONLY;
set schema "sys";

# MonetDB/SQL module loaded

# 15:56:11 >  
# 15:56:11 >  "/usr/bin/python" "upgrade.SQL.py" "upgrade"
# 15:56:11 >  

#select count(*) from testschema.smallstring;
% .%1 # table_name
% %1 # name
% bigint # type
% 2 # length
[ 66	]

# 15:17:06 >  
# 15:17:06 >  "Done."
# 15:17:06 >  

