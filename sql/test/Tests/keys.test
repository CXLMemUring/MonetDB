statement ok
START TRANSACTION

statement ok
CREATE TABLE allnewtriples (id integer NOT NULL, subject integer NOT
NULL, predicate integer NOT NULL, "object" integer NOT NULL, explicit
boolean NOT NULL, CONSTRAINT unique_key UNIQUE(subject, predicate, "object"))

statement ok
CREATE INDEX allnewtriples_subject_idx ON allnewtriples (subject)

statement ok
CREATE INDEX allnewtriples_predicate_idx ON allnewtriples (predicate)

statement ok
CREATE INDEX allnewtriples_object_idx ON allnewtriples ("object")

query TITI rowsort
SELECT idxs.name, idxs."type", keys.name, keys."type"
FROM sys.idxs LEFT JOIN sys.keys on idxs.name = keys.name
----
80 values hashing to 3bc52276783f16f2165aa0fb00b1173f

query TITI rowsort
SELECT idxs.name, idxs."type", keys.name, keys."type"
FROM sys.idxs JOIN sys.keys on idxs.name = keys.name
----
68 values hashing to 4a57f1b8f37ef467d85d37ba4d5bdc36

statement ok
/* test elimination of distinct restriction on aggregates */
create table dummyme (a int primary key, b int)

statement ok
insert into dummyme values (1,1), (2,1), (3,1)

query T rowsort
/* eliminated */
plan select count(distinct a) from dummyme
----
) [ "%1"."%1" NOT NULL ]
project (
| ) [  ] [ sys.count no nil ("dummyme"."a" NOT NULL HASHCOL ) NOT NULL as "%1"."%1" ]
| group by (
| | table(sys.dummyme) [ "dummyme"."a" NOT NULL HASHCOL  ] COUNT 

query T rowsort
plan select count(distinct a) from dummyme group by b
----
) [ "%1"."%1" NOT NULL ]
project (
| ) [ "dummyme"."b" ] [ sys.count no nil ("dummyme"."a" NOT NULL HASHCOL ) NOT NULL as "%1"."%1" ]
| group by (
| | table(sys.dummyme) [ "dummyme"."a" NOT NULL HASHCOL , "dummyme"."b" ] COUNT 

query T rowsort
/* not eliminated */
plan select count(distinct b) from dummyme
----
) [ "%1"."%1" ]
project (
| ) [  ] [ sys.count unique  no nil ("dummyme"."b") as "%1"."%1" ]
| group by (
| | table(sys.dummyme) [ "dummyme"."b" ] COUNT 

query T rowsort
plan select count(distinct a + 1) from dummyme
----
) [ "%1"."%1" ]
project (
| ) [  ] [ sys.count unique  no nil ("%2"."%2") as "%1"."%1" ]
| group by (
| | ) [ bigint["dummyme"."a" NOT NULL HASHCOL ] NOT NULL as "%3"."%3", sys.sql_add("%3"."%3" NOT NULL, bigint "1") as "%2"."%2" ]
| | project (
| | | table(sys.dummyme) [ "dummyme"."a" NOT NULL HASHCOL  ] COUNT 

query T rowsort
plan select count(distinct a + b) from dummyme
----
) [ "%1"."%1" ]
project (
| ) [  ] [ sys.count unique  no nil ("%2"."%2") as "%1"."%1" ]
| group by (
| | ) [ bigint["dummyme"."a" NOT NULL HASHCOL ] NOT NULL as "%3"."%3", bigint["dummyme"."b"] as "%4"."%4", sys.sql_add("%3"."%3" NOT NULL, "%4"."%4") as "%2"."%2" ]
| | project (
| | | table(sys.dummyme) [ "dummyme"."a" NOT NULL HASHCOL , "dummyme"."b" ] COUNT 

query T rowsort
plan select count(distinct abs(a)) from dummyme
----
) [ "%1"."%1" NOT NULL ]
project (
| ) [  ] [ sys.count unique  no nil ("%2"."%2" NOT NULL) NOT NULL as "%1"."%1" ]
| group by (
| | ) [ sys.abs("dummyme"."a" NOT NULL HASHCOL ) NOT NULL as "%2"."%2" ]
| | project (
| | | table(sys.dummyme) [ "dummyme"."a" NOT NULL HASHCOL  ] COUNT 

statement ok
ROLLBACK

