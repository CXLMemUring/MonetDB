# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0.  If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright 1997 - July 2008 CWI, August 2008 - 2018 MonetDB B.V.

# This file was generated by using the script sql_rank.mal.sh.

module sql;

pattern sql.diff(b:any_1) :bit
address SQLdiff
comment "return true if cur != prev row";

pattern batsql.diff(b:bat[:any_1]) :bat[:bit]
address SQLdiff
comment "return true if cur != prev row";

pattern sql.diff(p:bit, b:any_1) :bit
address SQLdiff
comment "return true if cur != prev row";

pattern batsql.diff(p:bat[:bit], b:bat[:any_1]) :bat[:bit]
address SQLdiff
comment "return true if cur != prev row";

pattern sql.row_number(b:any_1, p:bit, o:bit) :int
address SQLrow_number
comment "return the row_numer-ed groups";

pattern batsql.row_number(b:bat[:any_1], p:any_2, o:any_3) :bat[:int]
address SQLrow_number
comment "return the row_numer-ed groups";

pattern sql.rank(b:any_1, p:bit, o:bit) :int
address SQLrank
comment "return the ranked groups";

pattern batsql.rank(b:bat[:any_1], p:any_2, o:any_3) :bat[:int]
address SQLrank
comment "return the ranked groups";

pattern sql.dense_rank(b:any_1, p:bit, o:bit) :int
address SQLdense_rank
comment "return the densely ranked groups";

pattern batsql.dense_rank(b:bat[:any_1], p:any_2, o:any_3) :bat[:int]
address SQLdense_rank
comment "return the densely ranked groups";

pattern sql.percent_rank(b:any_1, p:bit, o:bit) :dbl
address SQLpercent_rank
comment "return the percentage into the total number of groups for each row";

pattern batsql.percent_rank(b:bat[:any_1], p:any_2, o:any_3) :bat[:dbl]
address SQLpercent_rank
comment "return the percentage into the total number of groups for each row";

pattern sql.cume_dist(b:any_1, p:bit, o:bit) :dbl
address SQLcume_dist
comment "return the accumulated distribution of the number of rows per group to the total number of partition rows";

pattern batsql.cume_dist(b:bat[:any_1], p:any_2, o:any_3) :bat[:dbl]
address SQLcume_dist
comment "return the accumulated distribution of the number of rows per group to the total number of partition rows";

pattern sql.min(b:any_1, p:bit, o:bit, unit:int, s:int, e:int, excl:int) :any_1
address SQLmin
comment "return the minimum of groups";

pattern batsql.min(b:bat[:any_1], p:any_2, o:any_3, unit:int, s:int, e:int, exl:int) :bat[:any_1]
address SQLmin
comment "return the minimum of groups";

pattern sql.max(b:any_1, p:bit, o:bit, unit:int, s:int, e:int, excl:int) :any_1
address SQLmax
comment "return the maximum of groups";

pattern batsql.max(b:bat[:any_1], p:any_2, o:any_3, unit:int, s:int, e:int, exl:int) :bat[:any_1]
address SQLmax
comment "return the maximum of groups";

pattern sql.count(p:bit, o:bit, unit:int, s:int, e:int, excl:int) :lng
address SQLcount
comment "return count of groups";

pattern batsql.count(p:any_1, o:any_2, unit:int, s:int, e:int, exl:int) :bat[:lng]
address SQLcount
comment "return count of groups";

pattern sql.count(b:any_1, p:bit, o:bit, unit:int, s:int, e:int, excl:int) :lng
address SQLcount_no_nil
comment "return count of groups";

pattern batsql.count(b:bat[:any_1], p:any_2, o:any_3, unit:int, s:int, e:int, exl:int) :bat[:lng]
address SQLcount_no_nil
comment "return count of groups";

pattern sql.ntile(b:bat[:any_1], n:bte, p:any_2, o:any_3) :bte
address SQLntile
comment "return the groups divided as equally as possible";

pattern batsql.ntile(b:bat[:any_1], n:bte, p:any_2, o:any_3) :bat[:bte]
address SQLntile
comment "return the groups divided as equally as possible";

pattern sql.ntile(b:bat[:any_1], n:sht, p:any_2, o:any_3) :sht
address SQLntile
comment "return the groups divided as equally as possible";

pattern batsql.ntile(b:bat[:any_1], n:sht, p:any_2, o:any_3) :bat[:sht]
address SQLntile
comment "return the groups divided as equally as possible";

pattern sql.ntile(b:bat[:any_1], n:int, p:any_2, o:any_3) :int
address SQLntile
comment "return the groups divided as equally as possible";

pattern batsql.ntile(b:bat[:any_1], n:int, p:any_2, o:any_3) :bat[:int]
address SQLntile
comment "return the groups divided as equally as possible";

pattern sql.ntile(b:bat[:any_1], n:lng, p:any_2, o:any_3) :lng
address SQLntile
comment "return the groups divided as equally as possible";

pattern batsql.ntile(b:bat[:any_1], n:lng, p:any_2, o:any_3) :bat[:lng]
address SQLntile
comment "return the groups divided as equally as possible";

pattern sql.sum(b:bte, p:bit, o:bit, unit:int, s:int, e:int, excl:int) :lng
address SQLsum
comment "return the sum of groups";

pattern batsql.sum(b:bat[:bte], p:any_1, o:any_2, unit:int, s:int, e:int, exl:int) :bat[:lng]
address SQLsum
comment "return the sum of groups";

pattern sql.prod(b:bte, p:bit, o:bit, unit:int, s:int, e:int, excl:int) :lng
address SQLprod
comment "return the product of groups";

pattern batsql.prod(b:bat[:bte], p:any_1, o:any_2, unit:int, s:int, e:int, exl:int) :bat[:lng]
address SQLprod
comment "return the product of groups";

pattern sql.sum(b:sht, p:bit, o:bit, unit:int, s:int, e:int, excl:int) :lng
address SQLsum
comment "return the sum of groups";

pattern batsql.sum(b:bat[:sht], p:any_1, o:any_2, unit:int, s:int, e:int, exl:int) :bat[:lng]
address SQLsum
comment "return the sum of groups";

pattern sql.prod(b:sht, p:bit, o:bit, unit:int, s:int, e:int, excl:int) :lng
address SQLprod
comment "return the product of groups";

pattern batsql.prod(b:bat[:sht], p:any_1, o:any_2, unit:int, s:int, e:int, exl:int) :bat[:lng]
address SQLprod
comment "return the product of groups";

pattern sql.sum(b:int, p:bit, o:bit, unit:int, s:int, e:int, excl:int) :lng
address SQLsum
comment "return the sum of groups";

pattern batsql.sum(b:bat[:int], p:any_1, o:any_2, unit:int, s:int, e:int, exl:int) :bat[:lng]
address SQLsum
comment "return the sum of groups";

pattern sql.prod(b:int, p:bit, o:bit, unit:int, s:int, e:int, excl:int) :lng
address SQLprod
comment "return the product of groups";

pattern batsql.prod(b:bat[:int], p:any_1, o:any_2, unit:int, s:int, e:int, exl:int) :bat[:lng]
address SQLprod
comment "return the product of groups";

pattern sql.sum(b:lng, p:bit, o:bit, unit:int, s:int, e:int, excl:int) :lng
address SQLsum
comment "return the sum of groups";

pattern batsql.sum(b:bat[:lng], p:any_1, o:any_2, unit:int, s:int, e:int, exl:int) :bat[:lng]
address SQLsum
comment "return the sum of groups";

pattern sql.prod(b:lng, p:bit, o:bit, unit:int, s:int, e:int, excl:int) :lng
address SQLprod
comment "return the product of groups";

pattern batsql.prod(b:bat[:lng], p:any_1, o:any_2, unit:int, s:int, e:int, exl:int) :bat[:lng]
address SQLprod
comment "return the product of groups";

pattern sql.sum(b:flt, p:bit, o:bit, unit:int, s:int, e:int, excl:int) :flt
address SQLsum
comment "return the sum of groups";

pattern batsql.sum(b:bat[:flt], p:any_1, o:any_2, unit:int, s:int, e:int, exl:int) :bat[:flt]
address SQLsum
comment "return the sum of groups";

pattern sql.prod(b:flt, p:bit, o:bit, unit:int, s:int, e:int, excl:int) :flt
address SQLprod
comment "return the product of groups";

pattern batsql.prod(b:bat[:flt], p:any_1, o:any_2, unit:int, s:int, e:int, exl:int) :bat[:flt]
address SQLprod
comment "return the product of groups";

pattern sql.sum(b:flt, p:bit, o:bit, unit:int, s:int, e:int, excl:int) :dbl
address SQLsum
comment "return the sum of groups";

pattern batsql.sum(b:bat[:flt], p:any_1, o:any_2, unit:int, s:int, e:int, exl:int) :bat[:dbl]
address SQLsum
comment "return the sum of groups";

pattern sql.prod(b:flt, p:bit, o:bit, unit:int, s:int, e:int, excl:int) :dbl
address SQLprod
comment "return the product of groups";

pattern batsql.prod(b:bat[:flt], p:any_1, o:any_2, unit:int, s:int, e:int, exl:int) :bat[:dbl]
address SQLprod
comment "return the product of groups";

pattern sql.sum(b:dbl, p:bit, o:bit, unit:int, s:int, e:int, excl:int) :dbl
address SQLsum
comment "return the sum of groups";

pattern batsql.sum(b:bat[:dbl], p:any_1, o:any_2, unit:int, s:int, e:int, exl:int) :bat[:dbl]
address SQLsum
comment "return the sum of groups";

pattern sql.prod(b:dbl, p:bit, o:bit, unit:int, s:int, e:int, excl:int) :dbl
address SQLprod
comment "return the product of groups";

pattern batsql.prod(b:bat[:dbl], p:any_1, o:any_2, unit:int, s:int, e:int, exl:int) :bat[:dbl]
address SQLprod
comment "return the product of groups";

pattern sql.avg(b:bte, p:bit, o:bit, unit:int, s:int, e:int, excl:int) :dbl
address SQLavg
comment "return the average of groups";

pattern batsql.avg(b:bat[:bte], p:any_1, o:any_2, unit:int, s:int, e:int, exl:int) :bat[:dbl]
address SQLavg
comment "return the average of groups";

pattern sql.avg(b:sht, p:bit, o:bit, unit:int, s:int, e:int, excl:int) :dbl
address SQLavg
comment "return the average of groups";

pattern batsql.avg(b:bat[:sht], p:any_1, o:any_2, unit:int, s:int, e:int, exl:int) :bat[:dbl]
address SQLavg
comment "return the average of groups";

pattern sql.avg(b:int, p:bit, o:bit, unit:int, s:int, e:int, excl:int) :dbl
address SQLavg
comment "return the average of groups";

pattern batsql.avg(b:bat[:int], p:any_1, o:any_2, unit:int, s:int, e:int, exl:int) :bat[:dbl]
address SQLavg
comment "return the average of groups";

pattern sql.avg(b:lng, p:bit, o:bit, unit:int, s:int, e:int, excl:int) :dbl
address SQLavg
comment "return the average of groups";

pattern batsql.avg(b:bat[:lng], p:any_1, o:any_2, unit:int, s:int, e:int, exl:int) :bat[:dbl]
address SQLavg
comment "return the average of groups";

pattern sql.avg(b:flt, p:bit, o:bit, unit:int, s:int, e:int, excl:int) :dbl
address SQLavg
comment "return the average of groups";

pattern batsql.avg(b:bat[:flt], p:any_1, o:any_2, unit:int, s:int, e:int, exl:int) :bat[:dbl]
address SQLavg
comment "return the average of groups";

pattern sql.avg(b:dbl, p:bit, o:bit, unit:int, s:int, e:int, excl:int) :dbl
address SQLavg
comment "return the average of groups";

pattern batsql.avg(b:bat[:dbl], p:any_1, o:any_2, unit:int, s:int, e:int, exl:int) :bat[:dbl]
address SQLavg
comment "return the average of groups";

command aggr.exist(b:bat[:any_2], h:any_1):bit
address ALGexist;

command aggr.exist(b:bat[:any_2]):bit
address SQLexist;

pattern aggr.exist(v:any_2):bit
address SQLexist_val;

