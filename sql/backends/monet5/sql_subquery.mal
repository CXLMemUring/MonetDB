# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0.  If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright 1997 - July 2008 CWI, August 2008 - 2020 MonetDB B.V.

module sql;

command zero_or_one( col:bat[:any_1]) :any_1
address zero_or_one
comment "if col contains exactly one value return this. Incase of more raise an exception else return nil";

command zero_or_one( col:bat[:any_1], err:bit) :any_1
address zero_or_one_error
comment "if col contains exactly one value return this. Incase of more raise an exception if err is true else return nil";

command zero_or_one( col:bat[:any_1], err:bat[:bit]) :any_1
address zero_or_one_error_bat
comment "if col contains exactly one value return this. Incase of more raise an exception if err is true else return nil";

command subzero_or_one( b:bat[:any_1], g:bat[:oid], e:bat[:oid], no_nil:bit) :bat[:any_1]
address SQLsubzero_or_one;

command all(b:bat[:any_1]) :any_1
address SQLall
comment "if all values in b are equal return this, else nil";

pattern suball(l:bat[:any_1], g:bat[:oid], e:bat[:oid], no_nil:bit) :bat[:any_1]
address SQLall_grp
comment "if all values in l are equal (per group) return the value, else nil";

pattern suball(l:bat[:any_1], g:bat[:oid], e:bat[:oid], s:bat[:oid], no_nil:bit) :bat[:any_1]
address SQLall_grp
comment "if all values in l are equal (per group) return the value, else nil; with candidate list";

command null(b:bat[:any_1]) :bit
address SQLnil
comment "if b has a nil return true, else false";

pattern subnull(l:bat[:any_1], g:bat[:oid], e:bat[:oid], no_nil:bit) :bat[:bit]
address SQLnil_grp
comment "if any value in l is nil with in a group return true for that group, else false";

pattern subnull(l:bat[:any_1], g:bat[:oid], e:bat[:oid], s:bat[:oid], no_nil:bit) :bat[:bit]
address SQLnil_grp
comment "if any value in l is nil with in a group return true for that group, else false; with candidate list";

command any(cmp:bit, nl:bit, nr:bit) :bit
address SQLany_cmp
comment "if cmp then true, (nl or nr) nil then nil, else false";

command all(cmp:bit, nl:bit, nr:bit) :bit
address SQLall_cmp
comment "if !cmp then false, (nl or nr) then nil, else true";

module aggr;

command anyequal(l:bat[:any_1], r:bat[:any_1]) :bit
address SQLanyequal
comment "if any value in r is equal to l return true, else if r has nil nil else false";

command allnotequal(l:bat[:any_1], r:bat[:any_1]) :bit
address SQLallnotequal
comment "if all values in r are not equal to l return true, else if r has nil nil else false";

pattern subanyequal(l:bat[:any_1], r:bat[:any_1], g:bat[:oid], e:bat[:oid], no_nil:bit) :bat[:bit]
address SQLanyequal_grp
comment "if any value in r is equal to l return true, else if r has nil nil else false";

pattern subanyequal(l:bat[:any_1], r:bat[:any_1], g:bat[:oid], e:bat[:oid], s:bat[:oid], no_nil:bit) :bat[:bit]
address SQLanyequal_grp
comment "if any value in r is equal to l return true, else if r has nil nil else false; with candidate list";

pattern subanyequal(l:bat[:any_1], r:bat[:any_1], rid:bat[:oid], g:bat[:oid], e:bat[:oid], no_nil:bit) :bat[:bit]
address SQLanyequal_grp2
comment "if any value in r is equal to l return true, else if r has nil nil else false, except if rid is nil (ie empty) then false";

pattern subanyequal(l:bat[:any_1], r:bat[:any_1], rid:bat[:oid], g:bat[:oid], e:bat[:oid], s:bat[:oid], no_nil:bit) :bat[:bit]
address SQLanyequal_grp2
comment "if any value in r is equal to l return true, else if r has nil nil else false, except if rid is nil (ie empty) then false; with candidate list";

pattern suballnotequal(l:bat[:any_1], r:bat[:any_1], g:bat[:oid], e:bat[:oid], no_nil:bit) :bat[:bit]
address SQLallnotequal_grp
comment "if all values in r are not equal to l return true, else if r has nil nil else false";

pattern suballnotequal(l:bat[:any_1], r:bat[:any_1], g:bat[:oid], e:bat[:oid], s:bat[:oid], no_nil:bit) :bat[:bit]
address SQLallnotequal_grp
comment "if all values in r are not equal to l return true, else if r has nil nil else false; with candidate list";

pattern suballnotequal(l:bat[:any_1], r:bat[:any_1], rid:bat[:oid], g:bat[:oid], e:bat[:oid], no_nil:bit) :bat[:bit]
address SQLallnotequal_grp2
comment "if all values in r are not equal to l return true, else if r has nil nil else false, except if rid is nil (ie empty) then true";

pattern suballnotequal(l:bat[:any_1], r:bat[:any_1], rid:bat[:oid], g:bat[:oid], e:bat[:oid], s:bat[:oid], no_nil:bit) :bat[:bit]
address SQLallnotequal_grp2
comment "if all values in r are not equal to l return true, else if r has nil nil else false, except if rid is nil (ie empty) then true; with candidate list";

module bataggr;

pattern aggr.exist(b:any_1):bit
address SQLexist;

pattern bataggr.exist(b:any_1):bat[:bit]
address SQLexist;

pattern bataggr.exist(b:bat[:any_1]):bit
address SQLexist;

pattern bataggr.exist(b:bat[:any_1]):bat[:bit]
address SQLexist;

pattern aggr.subexist(b:bat[:any_1], g:bat[:oid], e:bat[:oid], no_nil:bit):bat[:bit]
address SQLsubexist;

pattern aggr.subexist(b:bat[:any_1], g:bat[:oid], e:bat[:oid], s:bat[:oid], no_nil:bit) :bat[:bit]
address SQLsubexist;

pattern aggr.not_exist(b:any_1):bit
address SQLnot_exist;

pattern bataggr.not_exist(b:any_1):bat[:bit]
address SQLnot_exist;

pattern bataggr.not_exist(b:bat[:any_1]):bit
address SQLnot_exist;

pattern bataggr.not_exist(b:bat[:any_1]):bat[:bit]
address SQLnot_exist;

pattern aggr.subnot_exist(b:bat[:any_1], g:bat[:oid], e:bat[:oid], no_nil:bit):bat[:bit]
address SQLsubnot_exist;

pattern aggr.subexist(b:bat[:any_1], g:bat[:oid], e:bat[:oid], s:bat[:oid], no_nil:bit) :bat[:bit]
address SQLsubnot_exist;
