statement ok
include sql

statement ok
function octopus.bind(v:int):bat[:int]

statement ok
	b:= bat.new(:int)

statement ok
	bat.append(b,v)

statement ok
	return b

statement ok
end bind

statement ok
function octopus.bind(conn:str,v:int):bat[:int]

statement ok
	vh:= remote.put(conn,v)

statement ok
	b:= remote.put(conn,nil:bat[:int])

statement ok
	b:= remote.exec(conn,"octopus","bind",vh)

statement ok
	bv:bat[:int]:= remote.get(conn,b)

statement ok
	return bv

statement ok
end bind

statement ok
function octopus.tentacle(v:int, uri:str):bat[:int]

statement ok
	conn:str := remote.connect(uri, "monetdb", "monetdb", "msql")

statement ok
	b:= octopus.bind(conn,v)

statement ok
catch RMTexception:str

statement ok
	io.print(RMTexception)

statement ok
exit RMTexception

statement ok
	remote.disconnect(conn)

statement ok
	return tentacle:=b

statement ok
end tentacle

statement ok
function octopus.exec(uri:str, query:str, version:int):bat[:int]

statement ok
	conn:str := remote.connect(uri, "monetdb", "monetdb", "msql")

statement ok
	m:= remote.put(conn,version)

statement ok
	v:= remote.put(conn,nil:bat[:int])

statement ok
	u:= remote.put(conn,uri)

statement ok
	v:= remote.exec(conn,"octopus", query, m, u)

statement ok
	res:bat[:int]:= remote.get(conn,v)

statement ok
	remote.disconnect(conn)

statement ok
	return exec:=res

statement ok
end exec

statement error
uri := sabaoth.getLocalConnectionURI()

statement ok
res:= nil:bat

statement ok
barrier (go,version):= scheduler.octopus(10)

statement ok
	v1:bat[:int] :=octopus.exec(uri, "tentacle", version)

statement ok
	v2:bat[:int] :=octopus.exec(uri, "tentacle", version)

statement ok
	v3:bat[:int] :=octopus.exec(uri, "tentacle", version)

statement ok
	v4:bat[:int] :=octopus.exec(uri, "tentacle", version)

statement ok
	res:= mat.pack(v1,v2,v3,v4)

statement error
exit (go,version)

query T rowsort
io.print(res)
----
NULL

query T rowsort
io.print("done")
----
"done"

