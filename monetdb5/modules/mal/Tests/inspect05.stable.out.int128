stdout of test 'inspect05` in directory 'monetdb5/modules/mal` itself:


# 18:15:32 >  
# 18:15:32 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "gdk_dbfarm=/home/sjoerd/Monet-devel/var/MonetDB" "--set" "mapi_open=true" "--set" "mapi_port=37682" "--set" "monet_prompt=" "--trace" "--forcemito" "--set" "mal_listing=2" "--dbname=mTests_modules_mal" "inspect05.mal"
# 18:15:32 >  

# MonetDB 5 server v11.10.0 (hg id: d6a857b5d084)
# This is an unreleased version
# Serving database 'mTests_modules_mal', using 2 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 3.861 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://koolmees.mullender.nl:37682/
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded
# MonetDB/R   module loaded


# 13:20:34 >  
# 13:20:34 >  "mclient" "-lmal" "-ftest" "-Eutf-8" "--host=/var/tmp/mtest-7343" "--port=33287"
# 13:20:34 >  

#--------------------------#
# t	t	t	t	t  # name
# str	str	str	str	str  # type
#--------------------------#
[ 0@0,	"append",	"command",	"bat",	"(i:bat[:any_1], u:any_1):bat[:any_1] "	]
[ 1@0,	"append",	"command",	"bat",	"(i:bat[:any_1], u:any_1, force:bit):bat[:any_1] "	]
[ 2@0,	"append",	"command",	"bat",	"(i:bat[:any_1], u:bat[:any_1], s:bat[:oid], force:bit):bat[:any_1] "	]
[ 3@0,	"append",	"command",	"bat",	"(i:bat[:any_1], u:bat[:any_1], s:bat[:oid]):bat[:any_1] "	]
[ 4@0,	"append",	"command",	"bat",	"(i:bat[:any_1], u:bat[:any_1], force:bit):bat[:any_1] "	]
[ 5@0,	"append",	"command",	"bat",	"(i:bat[:any_1], u:bat[:any_1]):bat[:any_1] "	]
[ 6@0,	"attach",	"command",	"bat",	"(tt:int, heapfile:str):bat[:any_1] "	]
[ 7@0,	"delete",	"command",	"bat",	"(b:bat[:any_1]):bat[:any_1] "	]
[ 8@0,	"delete",	"command",	"bat",	"(b:bat[:any_1], d:bat[:oid]):bat[:any_1] "	]
[ 9@0,	"delete",	"command",	"bat",	"(b:bat[:any_1], h:oid):bat[:any_1] "	]
[ 10@0,	"densebat",	"command",	"bat",	"(sz:lng):bat[:oid] "	]
[ 11@0,	"diffcand",	"command",	"bat",	"(a:bat[:oid], b:bat[:oid]):bat[:oid] "	]
[ 12@0,	"getAccess",	"command",	"bat",	"(b:bat[:any_1]):str "	]
[ 13@0,	"getCapacity",	"command",	"bat",	"(b:bat[:any_1]):lng "	]
[ 14@0,	"getColumnType",	"command",	"bat",	"(b:bat[:any_1]):str "	]
[ 15@0,	"getName",	"command",	"bat",	"(b:bat[:any_1]):str "	]
[ 16@0,	"getRole",	"command",	"bat",	"(bid:bat[:any_1]):str "	]
[ 17@0,	"getSequenceBase",	"command",	"bat",	"(b:bat[:any_1]):oid "	]
[ 18@0,	"getSize",	"command",	"bat",	"(b:bat[:any_1]):lng "	]
[ 19@0,	"getorderidx",	"pattern",	"bat",	"(bv:bat[:any_1]):bat[:oid] "	]
[ 20@0,	"hasorderidx",	"pattern",	"bat",	"(bv:bat[:any_1]):bit "	]
[ 21@0,	"imprints",	"command",	"bat",	"(b:bat[:hge]):void "	]
[ 22@0,	"imprints",	"command",	"bat",	"(b:bat[:dbl]):void "	]
[ 23@0,	"imprints",	"command",	"bat",	"(b:bat[:flt]):void "	]
[ 24@0,	"imprints",	"command",	"bat",	"(b:bat[:lng]):void "	]
[ 25@0,	"imprints",	"command",	"bat",	"(b:bat[:int]):void "	]
[ 26@0,	"imprints",	"command",	"bat",	"(b:bat[:sht]):void "	]
[ 27@0,	"imprints",	"command",	"bat",	"(b:bat[:bte]):void "	]
[ 28@0,	"imprintsize",	"command",	"bat",	"(b:bat[:hge]):lng "	]
[ 29@0,	"imprintsize",	"command",	"bat",	"(b:bat[:dbl]):lng "	]
[ 30@0,	"imprintsize",	"command",	"bat",	"(b:bat[:flt]):lng "	]
[ 31@0,	"imprintsize",	"command",	"bat",	"(b:bat[:lng]):lng "	]
[ 32@0,	"imprintsize",	"command",	"bat",	"(b:bat[:int]):lng "	]
[ 33@0,	"imprintsize",	"command",	"bat",	"(b:bat[:sht]):lng "	]
[ 34@0,	"imprintsize",	"command",	"bat",	"(b:bat[:bte]):lng "	]
[ 35@0,	"info",	"command",	"bat",	"(b:bat[:any_1]) (X_0:bat[:str], X_1:bat[:str]) "	]
[ 36@0,	"intersectcand",	"command",	"bat",	"(a:bat[:oid], b:bat[:oid]):bat[:oid] "	]
[ 37@0,	"isPersistent",	"command",	"bat",	"(b:bat[:any_1]):bit "	]
[ 38@0,	"isSorted",	"command",	"bat",	"(b:bat[:any_1]):bit "	]
[ 39@0,	"isSortedReverse",	"command",	"bat",	"(b:bat[:any_1]):bit "	]
[ 40@0,	"isSynced",	"command",	"bat",	"(b1:bat[:any_1], b2:bat[:any_2]):bit "	]
[ 41@0,	"isTransient",	"command",	"bat",	"(b:bat[:any_1]):bit "	]
[ 42@0,	"isaKey",	"command",	"bat",	"(b:bat[:any_1]):bit "	]
[ 43@0,	"mergecand",	"command",	"bat",	"(a:bat[:oid], b:bat[:oid]):bat[:oid] "	]
[ 44@0,	"mirror",	"command",	"bat",	"(b:bat[:any_2]):bat[:oid] "	]
[ 45@0,	"new",	"pattern",	"bat",	"(tt:any_1, size:lng):bat[:any_1] "	]
[ 46@0,	"new",	"pattern",	"bat",	"(tt:any_1, size:int, persist:bit):bat[:any_1] "	]
[ 47@0,	"new",	"pattern",	"bat",	"(tt:any_1, size:lng, persist:bit):bat[:any_1] "	]
[ 48@0,	"new",	"pattern",	"bat",	"(tt:any_1, size:int):bat[:any_1] "	]
[ 49@0,	"new",	"pattern",	"bat",	"(tt:any_1):bat[:any_1] "	]
[ 50@0,	"orderidx",	"pattern",	"bat",	"(bv:bat[:any_1], l:bat[:any_1]...):void "	]
[ 51@0,	"orderidx",	"pattern",	"bat",	"(bv:bat[:any_1], pieces:int):void "	]
[ 52@0,	"orderidx",	"pattern",	"bat",	"(bv:bat[:any_1]):void "	]
[ 53@0,	"pack",	"pattern",	"bat",	"(X_0:any_2...):bat[:any_2] "	]
[ 54@0,	"partition",	"pattern",	"bat",	"(b:bat[:any_1], pieces:int, n:int):bat[:any_1] "	]
[ 55@0,	"partition",	"pattern",	"bat",	"(b:bat[:any_1]):bat[:any_1]... "	]
[ 56@0,	"replace",	"command",	"bat",	"(b:bat[:any_1], rid:bat[:oid], val:bat[:any_1], force:bit):bat[:any_1] "	]
[ 57@0,	"replace",	"command",	"bat",	"(b:bat[:any_1], rid:bat[:oid], val:bat[:any_1]):bat[:any_1] "	]
[ 58@0,	"replace",	"command",	"bat",	"(b:bat[:any_1], h:oid, t:any_1, force:bit):bat[:any_1] "	]
[ 59@0,	"replace",	"command",	"bat",	"(b:bat[:any_1], h:oid, t:any_1):bat[:any_1] "	]
[ 60@0,	"reuse",	"command",	"bat",	"(b:bat[:any_1], del:bat[:oid]):bat[:any_1] "	]
[ 61@0,	"reuseMap",	"command",	"bat",	"(b:bat[:any_1], del:bat[:oid]):bat[:oid] "	]
[ 62@0,	"save",	"command",	"bat",	"(nme:str):bit "	]
[ 63@0,	"save",	"command",	"bat",	"(nme:bat[:any_1]):void "	]
[ 64@0,	"setAccess",	"command",	"bat",	"(b:bat[:any_1], mode:str):bat[:any_1] "	]
[ 65@0,	"setColumn",	"command",	"bat",	"(b:bat[:any_1], t:str):void "	]
[ 66@0,	"setHash",	"command",	"bat",	"(b:bat[:any_1]):bit "	]
[ 67@0,	"setImprints",	"command",	"bat",	"(b:bat[:any_1]):bit "	]
[ 68@0,	"setName",	"command",	"bat",	"(b:bat[:any_1], s:str):void "	]
[ 69@0,	"setPersistent",	"command",	"bat",	"(b:bat[:any_1]):void "	]
[ 70@0,	"setTransient",	"command",	"bat",	"(b:bat[:any_1]):void "	]
[ 71@0,	"single",	"pattern",	"bat",	"(val:any_1):bat[:any_1] "	]

# 08:55:30 >  
# 08:55:30 >  Done.
# 08:55:30 >  

