statement ok
j:= bat.new(:json)

statement ok
b:= json.new("{}")

statement ok
bat.append(j,b)

statement ok
b:= json.new("{\"f1\":1}")

statement ok
bat.append(j,b)

statement ok
b:= json.new("{\"f1\":1,\"f2\":2}")

statement ok
bat.append(j,b)

statement ok
b:= json.new("{\"f1\":1,\"f2\":2,\"f1\":3}")

statement ok
bat.append(j,b)

statement ok
b:= json.new("{\"f1\":{\"f12\":3},\"f2\":[2,3,4]}")

statement ok
bat.append(j,b)

statement ok
f:bat[:json]:= mal.manifold("json","filter",j,"f1")

query TT rowsort
io.print(f)
----
10 values hashing to a32e0c711f42e0c49e1e7c51164cf958

statement ok
f:bat[:json]:= mal.manifold("json","filter",j,"f2")

query TT rowsort
io.print(f)
----
10 values hashing to 3bb00ca73bc0345da569ae9ffc39b748

statement ok
f:bat[:json]:= mal.manifold("json","filter",j,"f1[0]")

query TT rowsort
io.print(f)
----
10 values hashing to d06f41415f0c7433e1b9ded95368b01b

statement ok
f:bat[:json]:= mal.manifold("json","filter",j,"..f12")

query TT rowsort
io.print(f)
----
10 values hashing to 9ba4cfcff7480f7b994f4b002ebfecce

query T rowsort
io.printf("#next batch\n")
----
#next batch

statement ok
i:= bat.new(:json)

statement ok
b:= json.new("[1,\"f2\", 2]")

statement ok
bat.append(i,b)

statement ok
f:bat[:json]:= mal.manifold("json","filter",i,0)

query TT rowsort
io.print(f)
----
@
[1]

statement ok
f:bat[:json]:= mal.manifold("json","filter",i,1)

query TT rowsort
io.print(f)
----
@
["f2"]

statement ok
f:bat[:json]:= mal.manifold("json","filter",i,2)

query TT rowsort
io.print(f)
----
@
[2]

statement ok
f:bat[:json]:= mal.manifold("json","filter",i,3)

query TT rowsort
io.print(f)
----
@
[]

