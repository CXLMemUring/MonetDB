#[[
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0.  If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright 1997 - July 2008 CWI, August 2008 - 2020 MonetDB B.V.
#]]

find_package(BISON REQUIRED)
if(${CMAKE_VERSION} VERSION_LESS "3.14.0")
  find_package(Python3 COMPONENTS Interpreter Development)
  find_package(NumPy)
  if(Python3_Interpreter_FOUND)
    set(Python_EXECUTABLE "${Python3_EXECUTABLE}")
  endif(Python3_Interpreter_FOUND)
else()
  find_package(Python3 COMPONENTS Interpreter Development NumPy)
  if(Python3_Interpreter_FOUND)
    set(Python_EXECUTABLE "${Python3_EXECUTABLE}")
  endif(Python3_Interpreter_FOUND)
endif()
if(PY3INTEGRATION)
  set(HAVE_LIBPY3 "${Python3_FOUND}")
endif(PY3INTEGRATION)

if(WIN32)
  find_library(GETOPT_LIB "getopt.lib")
endif()
find_package(Iconv)
if(WITH_LZMA)
  find_package(LibLZMA)

  if (LIBLZMA_FOUND)
    if(NOT TARGET LibLZMA::LibLZMA)
        add_library(LibLZMA::LibLZMA UNKNOWN IMPORTED)
        set_target_properties(LibLZMA::LibLZMA PROPERTIES
                              INTERFACE_INCLUDE_DIRECTORIES ${LIBLZMA_INCLUDE_DIR}
                              IMPORTED_LINK_INTERFACE_LANGUAGES C
                              IMPORTED_LOCATION ${LIBLZMA_LIBRARY})
    endif()
    set(HAVE_LIBLZMA "${LZMA_FOUND}")
  endif ()

endif()
if(WITH_XML2)
  find_package(LibXml2)
  set(HAVE_LIBXML "${LIBXML2_FOUND}")
endif()
find_package(Threads)
if(WITH_PCRE)
  find_package(PCRE)
  set(HAVE_PCRE "${PCRE_FOUND}")
else()
  check_symbol_exists("regcomp" "regex.h" HAVE_POSIX_REGEX)
endif()
if(NOT PCRE_FOUND AND NOT HAVE_POSIX_REGEX)
	message(FATAL_ERROR "PCRE library or GNU regex library not found but required for MonetDB5")
endif()

if(${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
  find_package(CommonCrypto)
else()
  find_package(OpenSSL)
endif()
if(WITH_BZ2)
  find_package(BZip2)
  set(HAVE_LIBBZ2 "${BZ2_FOUND}")
endif()
if(WITH_CURL)
  find_package(CURL CONFIG)
  set(HAVE_CURL "${CURL_FOUND}")
endif()
if(WITH_ZLIB)
  find_package(ZLIB)
  set(HAVE_LIBZ "${ZLIB_FOUND}")
endif()
if(WITH_LZ4)
  find_package(LZ4)
  set(HAVE_LIBLZ4 "${LZ4_FOUND}")
endif()
if(WITH_PROJ)
  find_package(Proj)
  set(HAVE_PROJ "${PROJ_FOUND}")
endif()
if(WITH_SNAPPY)
  find_package(Snappy CONFIG)
endif()
if(WITH_UUID)
  find_package(UUID)
endif()
if(WITH_VALGRIND)
  find_package(Valgrind)
endif()
if(WITH_READLINE)
  find_package(Readline)
  set(HAVE_READLINE "${READLINE_FOUND}")
endif()

if(FITS)
  find_package(CFitsIO)
  set(HAVE_FITS "${CFITSIO_FOUND}")
endif()

if(CINTEGRATION)
  set(HAVE_CUDF ON CACHE INTERNAL "C udfs extension is available")
endif()

if(NETCDF)
	find_package(NetCDF)
	if(NETCDF_FOUND)
		set(NETCDF_MINIMUM_VERSION "4.2")
		if(NETCDF_VERSION VERSION_LESS "${NETCDF_MINIMUM_VERSION}")
			if(${WITH_NETCDF} STREQUAL "YES")
				message(FATAL_ERROR "netcdf library found, but the version is too old: ${NETCDF_VERSION} < ${NETCDF_MINIMUM_VERSION}")
			else()
				message(STATUS "netcdf library found, but the version is too old: ${NETCDF_VERSION} < ${NETCDF_MINIMUM_VERSION}")
			endif()
		else()
			set(HAVE_NETCDF "${NETCDF_FOUND}")
		endif()
		#else()
		#message(FATAL_ERROR "netcdf library required for NetCDF support")
	endif()
endif()

if(GEOM)
  find_package(Geos)
  set(HAVE_GEOM "${GEOS_FOUND}")
endif()

find_package(KVM)
set(HAVE_KVM "${KVM_FOUND}")

if(SHP)
	if(NOT HAVE_GEOM)
		#message(FATAL_ERROR "geom module required for ESRI Shapefile vault")
		message(STATUS "geom module required for ESRI Shapefile vault")
	else()
		find_package(GDAL)

		if(GDAL_FOUND)
			set(HAVE_SHP "${GDAL_FOUND}")
			#else()
			#message(FATAL_ERROR "gdal library required for ESRI Shapefile vault")
		endif()
	endif()
endif()

if(LIDAR)
	#include(/usr/share/cmake/libLAS/liblas-config.cmake)
	#include(/usr/share/cmake/libLAS/liblas-config-version.cmake)

	#if(LIBLAS_FOUND)
	#set(LIBLAS_VERSION_REQUIRED_MIN "1.8.0")
	#if(LIBLAS_VERSION VERSION_LESS "${LIBLAS_MINIMUM_VERSION}")
	##if(${WITH_LIBLAS} STREQUAL "YES")
	##	message(FATAL_ERROR "liblas library found, but the version is too old: ${LIBLAS_VERSION} < ${LIBLAS_MINIMUM_VERSION}")
	##else()
	#message(STATUS "liblas library found, but the version is too old: ${LIBLAS_VERSION} < ${LIBLAS_MINIMUM_VERSION}")
	##endif()
	#else()
	#set(HAVE_LIDAR "${LIBLAS_FOUND}")
	#endif()
	##else()
	##	message(FATAL_ERROR "liblas library required for lidar module")
	#endif()
endif()

if(ODBC)
  find_package(ODBC)
  set(HAVE_ODBC "${ODBC_FOUND}")
  if(ODBC_FOUND)
    cmake_push_check_state()
    set(CMAKE_REQUIRED_INCLUDES "${CMAKE_REQUIRED_INCLUDES};${ODBC_INCLUDE_DIR}")
    if(WIN32)
      set(CMAKE_EXTRA_INCLUDE_FILES "${CMAKE_EXTRA_INCLUDE_FILES};Windows.h;sqlext.h;sqltypes.h")
      find_path(HAVE_AFXRES_H "afxres.h")
    else()
      set(CMAKE_EXTRA_INCLUDE_FILES "${CMAKE_EXTRA_INCLUDE_FILES};sql.h;sqltypes.h")
    endif()
    check_type_size(SQLLEN _SQLLEN LANGUAGE C)
    if(HAVE__SQLLEN)
      set(LENP_OR_POINTER_T "SQLLEN *")
    else()
      set(LENP_OR_POINTER_T "SQLPOINTER")
    endif()
    check_type_size(SQLWCHAR SIZEOF_SQLWCHAR LANGUAGE C)
    cmake_pop_check_state()
  endif(ODBC_FOUND)
endif(ODBC)

if(RINTEGRATION)
  find_package(LibR)
  set(HAVE_LIBR "${LIBR_FOUND}")
  set(RHOME "${LIBR_HOME}")
endif()

cmake_push_check_state()
if(INT128)
  check_type_size(__int128 SIZEOF___INT128 LANGUAGE C)
  check_type_size(__int128_t SIZEOF___INT128_T LANGUAGE C)
  check_type_size(__uint128_t SIZEOF___UINT128_T LANGUAGE C)
  if(HAVE_SIZEOF___INT128 OR HAVE_SIZEOF___INT128_T OR HAVE_SIZEOF___UINT128_T)
    set(HAVE_HGE TRUE)
    message(STATUS "Huge integers are available")
  else()
   message(STATUS "128-bit integers not supported by this compiler")
   #message(FATAL_ERROR "128-bit integers not supported by this compiler")
  endif()
endif()
cmake_pop_check_state()

function(MT_addCompilerFlag REGEX_EXPRESSION FLAG_TO_ADD OLD_FLAGS BUILD NEW_FLAGS)
	if(NOT "${OLD_FLAGS}" MATCHES "${REGEX_EXPRESSION}")
		set(${NEW_FLAGS} "${OLD_FLAGS} ${FLAG_TO_ADD}" PARENT_SCOPE)
		message(STATUS "Added ${FLAG_TO_ADD} flag for ${BUILD} build(s)")
	endif()
endfunction()

function(MT_checkCompilerFlag Flag) # WARNING this doesn't work with LINK_OPTIONS yet!
	if(NOT "${CMAKE_C_FLAGS}" MATCHES "${Flag}")
		string(REGEX REPLACE "[-/=,]" "" FLAG_TEST "${Flag}") # cmake will get confused if we don't remove - / = ,
		cmake_push_check_state()
		set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} ${Flag}")
		check_c_source_compiles("int main(int argc,char** argv){(void)argc;(void)argv;return 0;}" COMPILER_${FLAG_TEST})
		cmake_pop_check_state()
		if(COMPILER_${FLAG_TEST})
			set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${Flag}" PARENT_SCOPE)
			message(STATUS "Added ${Flag} flag for all build(s)")
		endif()
	endif()
endfunction()

if(SANITIZER)
	if(${CMAKE_C_COMPILER_ID} STREQUAL "GNU")
		MT_addCompilerFlag("-fsanitize=address" "-fsanitize=address" "${CMAKE_C_FLAGS}" "all" CMAKE_C_FLAGS)
		MT_addCompilerFlag("-fno-omit-frame-pointer" "-fsanitize=address" "${CMAKE_C_FLAGS}" "all" CMAKE_C_FLAGS)
		add_definitions(-DNO_ATOMIC_INSTRUCTIONS)
	else()
		message(FATAL_ERROR "Sanitizer only supported with GCC")
	endif()
endif()


if(STRICT)
	if(${CMAKE_C_COMPILER_ID} MATCHES "^GNU|Clang|AppleClang$")
		MT_addCompilerFlag("-Werror" "-Werror" "${CMAKE_C_FLAGS}" "all" CMAKE_C_FLAGS)
		MT_addCompilerFlag("-Wall" "-Wall" "${CMAKE_C_FLAGS}" "all" CMAKE_C_FLAGS)
		MT_addCompilerFlag("-Wextra" "-Wextra" "${CMAKE_C_FLAGS}" "all" CMAKE_C_FLAGS)
		MT_addCompilerFlag("-W" "-W" "${CMAKE_C_FLAGS}" "all" CMAKE_C_FLAGS)
		MT_checkCompilerFlag("-Werror-implicit-function-declaration")

		MT_checkCompilerFlag("-Wpointer-arith")
		MT_checkCompilerFlag("-Wundef")
		MT_checkCompilerFlag("-Wformat=2")
		MT_checkCompilerFlag("-Wformat-overflow=1")
		MT_checkCompilerFlag("-Wno-format-truncation")
		MT_checkCompilerFlag("-Wno-format-nonliteral")
		#MT_checkCompilerFlag("-Wformat-signedness") 	-- numpy messes this up
		MT_checkCompilerFlag("-Wno-cast-function-type")
		MT_checkCompilerFlag("-Winit-self")
		MT_checkCompilerFlag("-Winvalid-pch")
		MT_checkCompilerFlag("-Wmissing-declarations")
		MT_checkCompilerFlag("-Wmissing-format-attribute")
		MT_checkCompilerFlag("-Wmissing-prototypes")
		# need this for clang 9.1.0 on Darwin:
		MT_checkCompilerFlag("-Wno-missing-field-initializers")
		MT_checkCompilerFlag("-Wold-style-definition")
		MT_checkCompilerFlag("-Wpacked")
		MT_checkCompilerFlag("-Wunknown-pragmas")
		MT_checkCompilerFlag("-Wvariadic-macros")
		MT_checkCompilerFlag("-Wstack-protector")
		MT_checkCompilerFlag("-fstack-protector-all")
		MT_checkCompilerFlag("-Wstack-protector")
		MT_checkCompilerFlag("-Wpacked-bitfield-compat")
		MT_checkCompilerFlag("-Wsync-nand")
		MT_checkCompilerFlag("-Wjump-misses-init")
		MT_checkCompilerFlag("-Wmissing-include-dirs")
		MT_checkCompilerFlag("-Wlogical-op")
		MT_checkCompilerFlag("-Wduplicated-cond")
		MT_checkCompilerFlag("-Wduplicated-branches")
		MT_checkCompilerFlag("-Wrestrict")
		MT_checkCompilerFlag("-Wnested-externs")

		# since we use values of type "int8_t" as subscript,
		# and int8_t may be defined as plain "char", we cannot
		# allow this warning (part of -Wall)
		MT_checkCompilerFlag("-Wno-char-subscripts")

		MT_checkCompilerFlag("-Wunreachable-code")

		#  Our code is not (yet?) up to these:
		#  MT_checkCompilerFlag("-pedantic-errors")
		#  MT_checkCompilerFlag("-Wno-long-long")
		#  MT_checkCompilerFlag("-Waggregate-return")
		#  MT_checkCompilerFlag("-Wbad-function-cast")
		#  MT_checkCompilerFlag("-Wcast-qual")
		#  MT_checkCompilerFlag("-Wconversion")
		#  MT_checkCompilerFlag("-Wdisabled-optimization")
		#  MT_checkCompilerFlag("-Wfloat-equal")
		#  MT_checkCompilerFlag("-Winline")
		#  MT_checkCompilerFlag("-Wmissing-noreturn")
		#  MT_checkCompilerFlag("-Wpadded")
		#  MT_checkCompilerFlag("-Wredundant-decls")
		#  MT_checkCompilerFlag("-Wshadow")
		#  MT_checkCompilerFlag("-Wstrict-prototypes")
		#  MT_checkCompilerFlag("-Wswitch-default")
		#  MT_checkCompilerFlag("-Wswitch-enum")
		#  MT_checkCompilerFlag("-Wtraditional")
		#  MT_checkCompilerFlag("-Wtraditional-conversion")
		#  MT_checkCompilerFlag("-Wwrite-strings")
		#  MT_checkCompilerFlag("-Wc++-compat")
		#  MT_checkCompilerFlag("-Woverlength-strings")
		#  MT_checkCompilerFlag("-Wsign-conversion")
		#  MT_checkCompilerFlag("-Wstrict-overflow=5")
		#  MT_checkCompilerFlag("-Wvla")
		#  MT_checkCompilerFlag("-Wunsuffixed-float-constants")
		#  MT_checkCompilerFlag("-Wnull-dereference")
	elseif(${CMAKE_C_COMPILER_ID} STREQUAL "Intel")
		MT_addCompilerFlag("${COMPILER_OPTION}Wall" "${COMPILER_OPTION}Wall" "${CMAKE_C_FLAGS}" "all" CMAKE_C_FLAGS)
		MT_addCompilerFlag("${COMPILER_OPTION}Wcheck" "${COMPILER_OPTION}Wcheck" "${CMAKE_C_FLAGS}" "all" CMAKE_C_FLAGS)
		MT_addCompilerFlag("${COMPILER_OPTION}Werror-all" "${COMPILER_OPTION}Werror-all" "${CMAKE_C_FLAGS}" "all" CMAKE_C_FLAGS)
		MT_addCompilerFlag("${COMPILER_OPTION}${INTEL_OPTION_EXTRA}wd2259" "${COMPILER_OPTION}${INTEL_OPTION_EXTRA}wd2259" "${CMAKE_C_FLAGS}" "all" CMAKE_C_FLAGS)
	elseif(MSVC)
		MT_addCompilerFlag("/WX" "/WX" "${CMAKE_C_FLAGS}" "all" CMAKE_C_FLAGS)
	endif()
endif()
if(NOT MSVC)
	cmake_push_check_state()
	set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS};-Wno-unreachable-code")
	check_c_source_compiles("int main(int argc,char** argv){(void)argc;(void)argv;return 0;}" COMPILER_Wnounreachablecode) # Warning don't add '-' or '/' to the output variable!
	cmake_pop_check_state()
endif()

if(NOT ASSERT)
	MT_checkCompilerFlag("-DNDEBUG=1")
endif()

# - socket libs (nsl_r, resolve, socket) // remove was only needed for old solaris and sunos
#	umem also solaris only (sanitizer, valgrind replaced this)
# - mtmalloc, malloc library// only needed when we need to optimize malloc (needs a benchmark first)
# _Noreturn - defined for microsoft only
# - LARGEFILE support (unused in the sources!)
# ToDo
# NAN - NAN_CANNOT_BE_USED_AS_INITIALIZER only for (old?) intel compilers
